//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

model Role {
  id          String   @id() @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  name        String   @unique()
  description String?
  users       User[]
}

model Organization {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  name      String   @unique()
  slug      String   @unique()
  domain    String?  @unique()
  users     User[]
  authors   Author[]
  posts     Post[]
}

model User {
  id             String        @id() @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt()
  email          String        @unique()
  password       String
  name           String
  role           Role          @relation(fields: [roleId], references: [id])
  roleId         String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  refreshToken   RefreshToken?

  @@index([email])
  @@index([organizationId])
}

model RefreshToken {
  id          String   @id() @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  hashedToken String
  expires     DateTime
  revoked     Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique()

  @@index([hashedToken])
}

model Author {
  id             String       @id() @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  name           String
  email          String       @unique()
  posts          Post[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([email])
  @@index([organizationId])
}

model Post {
  id             String       @id() @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  title          String
  content        String       @db.Text()
  tags           String[]     @default([])
  author         Author       @relation(fields: [authorId], references: [id])
  authorId       String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([authorId])
  @@index([organizationId])
  @@index([tags])
}
