/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PropertySimilarity } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatePropertySimilarity(options?: Omit<(UseMutationOptions<(PropertySimilarity | undefined), DefaultError, Prisma.PropertySimilarityCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PropertySimilarityCreateArgs, DefaultError, PropertySimilarity, true>('PropertySimilarity', 'POST', `${endpoint}/propertySimilarity/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PropertySimilarityCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PropertySimilarityCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PropertySimilarity, Prisma.PropertySimilarityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PropertySimilarityCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PropertySimilarity, Prisma.PropertySimilarityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPropertySimilarity(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PropertySimilarityCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PropertySimilarityCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PropertySimilarity', 'POST', `${endpoint}/propertySimilarity/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PropertySimilarityCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PropertySimilarityCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PropertySimilarityCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPropertySimilarity<TArgs extends Prisma.PropertySimilarityFindManyArgs, TQueryFnData = Array<Prisma.PropertySimilarityGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPropertySimilarity<TArgs extends Prisma.PropertySimilarityFindManyArgs, TQueryFnData = Array<Prisma.PropertySimilarityGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/findMany`, args, options, fetch);
}

export function useSuspenseFindManyPropertySimilarity<TArgs extends Prisma.PropertySimilarityFindManyArgs, TQueryFnData = Array<Prisma.PropertySimilarityGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyPropertySimilarity<TArgs extends Prisma.PropertySimilarityFindManyArgs, TQueryFnData = Array<Prisma.PropertySimilarityGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/findMany`, args, options, fetch);
}

export function useFindUniquePropertySimilarity<TArgs extends Prisma.PropertySimilarityFindUniqueArgs, TQueryFnData = Prisma.PropertySimilarityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquePropertySimilarity<TArgs extends Prisma.PropertySimilarityFindUniqueArgs, TQueryFnData = Prisma.PropertySimilarityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/findUnique`, args, options, fetch);
}

export function useFindFirstPropertySimilarity<TArgs extends Prisma.PropertySimilarityFindFirstArgs, TQueryFnData = Prisma.PropertySimilarityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstPropertySimilarity<TArgs extends Prisma.PropertySimilarityFindFirstArgs, TQueryFnData = Prisma.PropertySimilarityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/findFirst`, args, options, fetch);
}

export function useUpdatePropertySimilarity(options?: Omit<(UseMutationOptions<(PropertySimilarity | undefined), DefaultError, Prisma.PropertySimilarityUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PropertySimilarityUpdateArgs, DefaultError, PropertySimilarity, true>('PropertySimilarity', 'PUT', `${endpoint}/propertySimilarity/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PropertySimilarityUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PropertySimilarityUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PropertySimilarity, Prisma.PropertySimilarityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PropertySimilarityUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PropertySimilarity, Prisma.PropertySimilarityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPropertySimilarity(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PropertySimilarityUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PropertySimilarityUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PropertySimilarity', 'PUT', `${endpoint}/propertySimilarity/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PropertySimilarityUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PropertySimilarityUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PropertySimilarityUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPropertySimilarity(options?: Omit<(UseMutationOptions<(PropertySimilarity | undefined), DefaultError, Prisma.PropertySimilarityUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PropertySimilarityUpsertArgs, DefaultError, PropertySimilarity, true>('PropertySimilarity', 'POST', `${endpoint}/propertySimilarity/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PropertySimilarityUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PropertySimilarityUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PropertySimilarity, Prisma.PropertySimilarityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PropertySimilarityUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PropertySimilarity, Prisma.PropertySimilarityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePropertySimilarity(options?: Omit<(UseMutationOptions<(PropertySimilarity | undefined), DefaultError, Prisma.PropertySimilarityDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PropertySimilarityDeleteArgs, DefaultError, PropertySimilarity, true>('PropertySimilarity', 'DELETE', `${endpoint}/propertySimilarity/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PropertySimilarityDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PropertySimilarityDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PropertySimilarity, Prisma.PropertySimilarityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PropertySimilarityDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PropertySimilarity, Prisma.PropertySimilarityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPropertySimilarity(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PropertySimilarityDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PropertySimilarityDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PropertySimilarity', 'DELETE', `${endpoint}/propertySimilarity/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PropertySimilarityDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PropertySimilarityDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PropertySimilarityDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePropertySimilarity<TArgs extends Prisma.PropertySimilarityAggregateArgs, TQueryFnData = Prisma.GetPropertySimilarityAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePropertySimilarity<TArgs extends Prisma.PropertySimilarityAggregateArgs, TQueryFnData = Prisma.GetPropertySimilarityAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/aggregate`, args, options, fetch);
}

export function useGroupByPropertySimilarity<TArgs extends Prisma.PropertySimilarityGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PropertySimilarityGroupByArgs['orderBy'] } : { orderBy?: Prisma.PropertySimilarityGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PropertySimilarityGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PropertySimilarityGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PropertySimilarityGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PropertySimilarityGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PropertySimilarityGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByPropertySimilarity<TArgs extends Prisma.PropertySimilarityGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PropertySimilarityGroupByArgs['orderBy'] } : { orderBy?: Prisma.PropertySimilarityGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PropertySimilarityGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PropertySimilarityGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PropertySimilarityGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PropertySimilarityGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PropertySimilarityGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/groupBy`, args, options, fetch);
}

export function useCountPropertySimilarity<TArgs extends Prisma.PropertySimilarityCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PropertySimilarityCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/count`, args, options, fetch);
}

export function useSuspenseCountPropertySimilarity<TArgs extends Prisma.PropertySimilarityCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PropertySimilarityCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PropertySimilarityCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/count`, args, options, fetch);
}

export function useCheckPropertySimilarity<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; propertyId?: string; similarPropertyId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PropertySimilarity', `${endpoint}/propertySimilarity/check`, args, options, fetch);
}
